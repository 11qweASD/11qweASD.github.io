<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>视频播放器独立控制按钮版</title>
      <link href="/smk/kk80/"/>
      <url>/smk/kk80/</url>
      
        <content type="html"><![CDATA[<!-- raw --><div class="video-list" id="videoList"></div><style>.video-list {  height: 70vh;  overflow-y: scroll;  scroll-snap-type: y mandatory;}.video-item {  scroll-snap-align: start;  width: 100%;  height: 70vh;  position: relative;}video {  width: 100%;  height: 100%;  object-fit: cover;  border-radius: 12px;}.global-controls {  margin-top: 1rem;  display: flex;  gap: 10px;  flex-wrap: wrap;  justify-content: center;}.global-controls button,.global-controls select {  padding: 6px 12px;  background: #222;  color: #fff;  border: none;  border-radius: 6px;}</style><script>const container = document.getElementById("videoList");const sources = [  "https://v2.xxapi.cn/api/meinv",  "http://api.yujn.cn/api/zzxjj.php",  "https://jx.iqfk.top/api/sjsp.php",  "https://www.cunshao.com/666666/api/web.php",  "https://api.qoc.cc/api/xjj",  "http://v.nrzj.vip/video.php"];let defaultLine = localStorage.getItem('selectedLine') || sources[1];let currentIndex = 0;let videoElements = [];let autoPlay = true;// 初始化线路选择器const lineSelect = document.getElementById("lineSelect");sources.forEach((src, i) => {  const opt = document.createElement("option");  opt.value = src;  opt.textContent = "线路" + i;  if (src === defaultLine) opt.selected = true;  lineSelect.appendChild(opt);});lineSelect.onchange = () => {  defaultLine = lineSelect.value;  localStorage.setItem('selectedLine', defaultLine);  updateVideoSrc(videoElements[currentIndex]);};// 清晰度选择const qualitySelect = document.getElementById("qualitySelect");qualitySelect.onchange = () => {  updateVideoSrc(videoElements[currentIndex]);};// 播放/暂停const playPauseBtn = document.getElementById("playPauseBtn");playPauseBtn.onclick = () => {  const video = videoElements[currentIndex];  if (video.paused) {    video.play();    playPauseBtn.textContent = "暂停";  } else {    video.pause();    playPauseBtn.textContent = "播放";  }};// 下一个document.getElementById("nextBtn").onclick = () => {  if (currentIndex < videoElements.length - 1) {    scrollTo(currentIndex + 1);  }};// 改变视频地址function updateVideoSrc(video) {  const url = new URL(defaultLine + "?_t=" + Math.random());  url.searchParams.set("quality", qualitySelect.value);  video.src = url.toString();  video.play();}// 创建视频function createVideo(index, autoplay = false) {  const wrapper = document.createElement("div");  wrapper.className = "video-item";  const video = document.createElement("video");  video.src = defaultLine + "?_t=" + Math.random() + "&quality=1080";  video.setAttribute("playsinline", "");  video.setAttribute("webkit-playsinline", "");  video.setAttribute("x5-video-player-type", "h5");  video.setAttribute("x5-video-player-fullscreen", "true");  video.controls = false;  video.muted = false;  if (autoplay) video.autoplay = true;  video.onended = () => {    if (autoPlay) {      updateVideoSrc(video);    }  };  wrapper.appendChild(video);  container.appendChild(wrapper);  videoElements.push(video);}// 滚动切换function scrollTo(index) {  if (index >= 0 && index < videoElements.length) {    videoElements[currentIndex].pause();    videoElements[index].scrollIntoView({ behavior: "smooth" });    videoElements[index].play();    currentIndex = index;    playPauseBtn.textContent = "暂停";    if (index + 3 >= videoElements.length) {      createVideo(false);    }  }}// 自动检测滑动切换container.addEventListener("scroll", () => {  const items = document.querySelectorAll(".video-item");  items.forEach((item, i) => {    const rect = item.getBoundingClientRect();    if (rect.top >= 0 && rect.top < window.innerHeight / 2) {      if (i !== currentIndex) {        videoElements[currentIndex].pause();        videoElements[i].play();        currentIndex = i;        playPauseBtn.textContent = "暂停";        if (i + 3 >= videoElements.length) {          createVideo(false);        }      }    }  });});// 初始加载(function preloadVideos(count) {  for (let i = 0; i < count; i++) createVideo(i === 0);})(5);</script><!-- endraw --><!-- 控制按钮区域 --><div class="global-controls">  <button id="playPauseBtn">暂停</button>  <button id="nextBtn">下一个</button>  <select id="lineSelect"></select>  <select id="qualitySelect">    <option value="480">标清480P</option>    <option value="720">高清720P</option>    <option value="1080" selected>超清1080P</option>  </select>  <button onclick="location.href='http://113.45.37.106/2/3/2.html'">苹果版</button></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>都感觉哦视频分配配电房识破额哦该25ff6</title>
      <link href="/smk/hkkom/"/>
      <url>/smk/hkkom/</url>
      
        <content type="html"><![CDATA[<div class="video-container" id="videoContainer-abc" data-url="https://zb.ccq3.cn/图片/好看吗.mp4"></div><style>.video-container {  position: relative;  width: 100%;  padding-top: 56.25%;  background: #000;}.video-container iframe,.video-container video {  position: absolute;  top: 0;  left: 0;  width: 100%;  height: 100%;  border: none;  border-radius: 12px; /* ✅ 加这一行即可，控制圆角 */}</style><script>(function () {  function embedVideo(container) {    if (!container) return;    const videoUrl = container.getAttribute('data-url');    if (!videoUrl) {      container.innerHTML = '<p style="color:#fff;text-align:center;">无效视频链接</p>';      return;    }    container.innerHTML = ''; // 清空之前的内容    let element;    const youtubeMatch = videoUrl.match(/(?:youtu\.be\/|youtube\.com\/watch\?v=|youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/);    if (youtubeMatch) {      const videoId = youtubeMatch[1];      element = document.createElement('iframe');      element.src = `https://www.youtube.com/embed/${videoId}`;      element.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';      element.allowFullscreen = true;      element.referrerPolicy = 'strict-origin-when-cross-origin';    } else if (videoUrl.match(/\.(mp4|webm|ogg)(\?.*)?$/i)) {      const realUrl = videoUrl + (videoUrl.includes('?') ? '&' : '?') + 't=' + Date.now();      element = document.createElement('video');      element.src = realUrl;      element.controls = true;      element.playsInline = true;      element.preload = 'auto';    } else if (videoUrl.match(/\.html?$/i)) {      element = document.createElement('iframe');      element.src = videoUrl;      element.allowFullscreen = true;      element.referrerPolicy = 'no-referrer';      element.sandbox = "allow-scripts allow-same-origin";    } else {      container.innerHTML = '<p style="color:#fff;text-align:center;">不支持的视频格式</p>';      return;    }    container.appendChild(element);  }  function initVideoContainers() {    const containers = document.querySelectorAll('.video-container[data-url]');    containers.forEach(embedVideo);  }  // 页面加载初始化  document.addEventListener('DOMContentLoaded', initVideoContainers);  // PJAX 页面切换后重新初始化  document.addEventListener('pjax:complete', initVideoContainers);})();</script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 技术 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/smk/hello-world/"/>
      <url>/smk/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="配置主题与主站配置文件-到这一步主题部署就完成了"><a href="#配置主题与主站配置文件-到这一步主题部署就完成了" class="headerlink" title="配置主题与主站配置文件,到这一步主题部署就完成了"></a>配置主题与主站配置文件,到这一步主题部署就完成了</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本地预览</span><br><span class="line">hexo cl; hexo s</span><br><span class="line"></span><br><span class="line">//推送更新上线</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>slv</title>
      <link href="/smk/slv/"/>
      <url>/smk/slv/</url>
      
        <content type="html"><![CDATA[<div class="video-container" id="videoContainer-abc" data-url="https://youtu.be/M-G977nQNhc?si=EbirtbTHWZzHVaJS"></div><style>.video-container {  position: relative;  width: 100%;  padding-top: 56.25%;  background: #000;}.video-container iframe,.video-container video {  position: absolute;  top: 0;  left: 0;  width: 100%;  height: 100%;  border: none;}</style><script>(function () {  function embedVideo(container) {    if (!container) return;    const videoUrl = container.getAttribute('data-url');    if (!videoUrl) {      container.innerHTML = '<p style="color:#fff;text-align:center;">无效视频链接</p>';      return;    }    container.innerHTML = ''; // 清空之前的内容    let element;    const youtubeMatch = videoUrl.match(/(?:youtu\.be\/|youtube\.com\/watch\?v=|youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/);    if (youtubeMatch) {      const videoId = youtubeMatch[1];      element = document.createElement('iframe');      element.src = `https://www.youtube.com/embed/${videoId}`;      element.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';      element.allowFullscreen = true;      element.referrerPolicy = 'strict-origin-when-cross-origin';    } else if (videoUrl.match(/\.(mp4|webm|ogg)(\?.*)?$/i)) {      const realUrl = videoUrl + (videoUrl.includes('?') ? '&' : '?') + 't=' + Date.now();      element = document.createElement('video');      element.src = realUrl;      element.controls = true;      element.playsInline = true;      element.preload = 'auto';    } else if (videoUrl.match(/\.html?$/i)) {      element = document.createElement('iframe');      element.src = videoUrl;      element.allowFullscreen = true;      element.referrerPolicy = 'no-referrer';      element.sandbox = "allow-scripts allow-same-origin";    } else {      container.innerHTML = '<p style="color:#fff;text-align:center;">不支持的视频格式</p>';      return;    }    container.appendChild(element);  }  function initVideoContainers() {    const containers = document.querySelectorAll('.video-container[data-url]');    containers.forEach(embedVideo);  }  // 页面加载初始化  document.addEventListener('DOMContentLoaded', initVideoContainers);  // PJAX 页面切换后重新初始化  document.addEventListener('pjax:complete', initVideoContainers);})();</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
